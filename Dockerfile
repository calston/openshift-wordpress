FROM debian:jessie

# persistent / runtime deps
ENV PHPIZE_DEPS \
                autoconf \
                file \
                g++ \
                gcc \
                libc-dev \
                make \
                pkg-config \
                re2c
RUN apt-get update && apt-get install -y \
                $PHPIZE_DEPS \
                ca-certificates \
                curl \
                libedit2 \
                libsqlite3-0 \
                libxml2 \
                xz-utils \
        --no-install-recommends && rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
RUN apt-get update && apt-get install -y apache2-bin apache2.2-common --no-install-recommends && rm -rf /var/lib/apt/lists/*

ENV APACHE_CONFDIR /etc/apache2
ENV APACHE_ENVVARS $APACHE_CONFDIR/envvars

RUN set -ex \
        \
# generically convert lines like
#   export APACHE_RUN_USER=www-data
# into
#   : ${APACHE_RUN_USER:=www-data}
#   export APACHE_RUN_USER
# so that they can be overridden at runtime ("-e APACHE_RUN_USER=...")
        && sed -ri 's/^export ([^=]+)=(.*)$/: ${\1:=\2}\nexport \1/' "$APACHE_ENVVARS" \
        \
# setup directories and permissions
        && . "$APACHE_ENVVARS" \
        && for dir in \
                "$APACHE_LOCK_DIR" \
                "$APACHE_RUN_DIR" \
                "$APACHE_LOG_DIR" \
                /var/www/html \
        ; do \
                rm -rvf "$dir" \
                && mkdir -p "$dir" \
                && chown -R "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$dir"; \
        done

# Apache + PHP requires preforking Apache for best results
RUN a2dismod mpm_event && a2enmod mpm_prefork

# logs should go to stdout / stderr
RUN set -ex \
        && . "$APACHE_ENVVARS" \
        && ln -sfT /dev/stderr "$APACHE_LOG_DIR/error.log" \
        && ln -sfT /dev/stdout "$APACHE_LOG_DIR/access.log" \
        && ln -sfT /dev/stdout "$APACHE_LOG_DIR/other_vhosts_access.log"

# PHP files should be handled by PHP, and should be preferred over any other file type
RUN { \
                echo '<FilesMatch \.php$>'; \
                echo '\tSetHandler application/x-httpd-php'; \
                echo '</FilesMatch>'; \
                echo; \
                echo 'DirectoryIndex disabled'; \
                echo 'DirectoryIndex index.php index.html'; \
                echo; \
                echo '<Directory /var/www/>'; \
                echo '\tOptions -Indexes'; \
                echo '\tAllowOverride All'; \
                echo '</Directory>'; \
        } | tee "$APACHE_CONFDIR/conf-available/docker-php.conf" \
        && a2enconf docker-php

ENV PHP_EXTRA_BUILD_DEPS apache2-dev
ENV PHP_EXTRA_CONFIGURE_ARGS --with-apxs2
##</autogenerated>##

ENV GPG_KEYS 0BD78B5F97500D450838F95DFE857D9A90D90EC1 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3

ENV PHP_VERSION 5.6.28
ENV PHP_URL="https://secure.php.net/get/php-5.6.28.tar.xz/from/this/mirror" PHP_ASC_URL="https://secure.php.net/get/php-5.6.28.tar.xz.asc/from/this/mirror"
ENV PHP_SHA256="07187ba2870f89cef334cd2ad6cb801aeec5eaf283da0293a9a6be75d6786d11" PHP_MD5="1e01c66b2e67ab3b56a6180ee560fe4c"

RUN set -xe; \
        \
        fetchDeps=' \
                wget \
        '; \
        apt-get update; \
        apt-get install -y --no-install-recommends $fetchDeps; \
        rm -rf /var/lib/apt/lists/*; \
        \
        mkdir -p /usr/src; \
        cd /usr/src; \
        \
        wget -O php.tar.xz "$PHP_URL"; \
        \
        if [ -n "$PHP_SHA256" ]; then \
                echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
        fi; \
        if [ -n "$PHP_MD5" ]; then \
                echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
        fi; \
        \
        if [ -n "$PHP_ASC_URL" ]; then \
                wget -O php.tar.xz.asc "$PHP_ASC_URL"; \
                export GNUPGHOME="$(mktemp -d)"; \
                for key in $GPG_KEYS; do \
                        gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
                done; \
                gpg --batch --verify php.tar.xz.asc php.tar.xz; \
                rm -r "$GNUPGHOME"; \
        fi; \
        \
        apt-get purge -y --auto-remove $fetchDeps

COPY docker-php-source /usr/local/bin/

RUN set -xe \
        && buildDeps=" \
                $PHP_EXTRA_BUILD_DEPS \
                libcurl4-openssl-dev \
                libedit-dev \
                libsqlite3-dev \
                libssl-dev \
                libxml2-dev \
        " \
        && apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
        \
        && docker-php-source extract \
        && cd /usr/src/php \
        && ./configure \
                --with-config-file-path="$PHP_INI_DIR" \
                --with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
                \
                --disable-cgi \
                \
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
                --enable-ftp \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
                --enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
                --enable-mysqlnd \
                \
                --with-curl \
                --with-libedit \
                --with-openssl \
                --with-zlib \
                \
                $PHP_EXTRA_CONFIGURE_ARGS \
        && make -j "$(nproc)" \
        && make install \
        && { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \
        && make clean \
        && docker-php-source delete \
        \
        && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps

COPY docker-php-ext-* /usr/local/bin/

##<autogenerated>##
COPY apache2-foreground /usr/local/bin/
WORKDIR /var/www/html

CMD ["apache2-foreground"]
##</autogenerated>##
# install the PHP extensions we need
RUN apt-get update && apt-get install -y libpng12-dev libjpeg-dev && rm -rf /var/lib/apt/lists/* \
	&& docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr \
	&& docker-php-ext-install gd mysqli opcache

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
RUN { \
		echo 'opcache.memory_consumption=128'; \
		echo 'opcache.interned_strings_buffer=8'; \
		echo 'opcache.max_accelerated_files=4000'; \
		echo 'opcache.revalidate_freq=2'; \
		echo 'opcache.fast_shutdown=1'; \
		echo 'opcache.enable_cli=1'; \
	} > /usr/local/etc/php/conf.d/opcache-recommended.ini

RUN a2enmod rewrite expires

VOLUME /var/www/html

ENV WORDPRESS_VERSION 4.6.1
ENV WORDPRESS_SHA1 027e065d30a64720624a7404a1820e6c6fff1202

RUN set -x \
	&& curl -o wordpress.tar.gz -fSL "https://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz" \
	&& echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c - \
# upstream tarballs include ./wordpress/ so this gives us /usr/src/wordpress
	&& tar -xzf wordpress.tar.gz -C /usr/src/ \
	&& rm wordpress.tar.gz \
	&& chown -R www-data:www-data /usr/src/wordpress

COPY docker-entrypoint.sh /usr/local/bin/

COPY ports.conf /etc/apache2/ports.conf
COPY default.conf /etc/apache2/sites-enabled/000-default.conf

RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat

RUN groupadd -f -g 1000 me && useradd -u 1000 -g me me

RUN chown -R me:me /usr/local/apache2/

USER me

# ENTRYPOINT resets CMD
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["apache2-foreground"]

EXPOSE 8080
